#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

// Function to sort array in ascending order
void ascending(int *a, int n) {
    for (int i = 0; i < n - 1; i++)             // Loop through elements
        for (int j = 0; j < n - 1 - i; j++)        // Inner loop for adjacent comparison
            if (a[j] > a[j + 1]) {                 // Swap if out of order
                int temp = a[j];
                a[j] = a[j + 1];
                a[j + 1] = temp;
            }
}

// Function to sort array in descending order
void descending(int *a, int n) {
    for (int i = 0; i < n - 1; i++)               // Loop through elements
        for (int j = 0; j < n - 1 - i; j++)       // Inner loop for adjacent comparison
            if (a[j] < a[j + 1]) {                // Swap if out of order
                int temp = a[j];
                a[j] = a[j + 1];
                a[j + 1] = temp;
            }
}

int main() {
    int n;
    printf("Enter number of array elements: ");
    scanf("%d", &n);  // Input number of elements

    int a[n];
    printf("Enter array elements:\n");
    for (int i = 0; i < n; i++) scanf("%d", &a[i]);  // Input array elements

    int pid = fork();      // Fork a new process

    if (pid < 0) {         // Error handling if fork fails
        perror("Fork error");
        exit(EXIT_FAILURE);
    } 
    else if (pid == 0) {   // Child process
        printf("\n CHILD PROCESS - Descending Order:\n");
        descending(a, n);  // Sort array in descending order
        for (int i = 0; i < n; i++) printf("%d ", a[i]);  // Display sorted array
        printf("\n");
        exit(0);
    } 
    else {                 // Parent process
        wait(NULL);        // Wait for child to finish
        printf("\nPARENT PROCESS - Ascending Order:\n");
        ascending(a, n);   // Sort array in ascending order
        for (int i = 0; i < n; i++) printf("%d ", a[i]);  // Display sorted array
        printf("\n");
    }
    return 0;
}

